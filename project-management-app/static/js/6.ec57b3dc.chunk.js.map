{"version":3,"file":"static/js/6.ec57b3dc.chunk.js","mappings":"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","sources":["components/Tasks/TaskItem.tsx","components/Tasks/TasksList.tsx","components/Column/Column.tsx","components/ModalCreateColumn/ModalCreateColumn.tsx","components/ModalDeleteColumn/ModalDeleteColumn.tsx","components/ModalCreateTask/ModalCreateTask.tsx","components/ModalUpdateTask/ModalUpdateTask.tsx","components/ModalDeleteTask/ModalDeleteTask.tsx","components/pages/Board/Board.tsx","../node_modules/@mui/icons-material/CheckOutlined.js","../node_modules/@mui/icons-material/ClearOutlined.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport {\r\n  setShowModalDeleteTask,\r\n  setShowModalUpdateTask,\r\n} from '../../reducers/modalPopupSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ColumnType, ICreatedTaskType } from '../../types';\r\nimport './task.scss';\r\n\r\nexport default function Task({ task, column }: {\r\n  task: ICreatedTaskType;\r\n  column: ColumnType\r\n}) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const deleteTask = (task: ICreatedTaskType) => {\r\n    dispatch(setShowModalDeleteTask(task));\r\n  };\r\n\r\n  const updateTaskRequest = (task: ICreatedTaskType) => {\r\n    dispatch(setShowModalUpdateTask(task));\r\n  };\r\n\r\n  return (\r\n    <div className=\"task\">\r\n      <div className=\"task__content\">\r\n        <h3\r\n          className=\"task__title\"\r\n          onClick={() => {\r\n            updateTaskRequest(task);\r\n          }}\r\n        >\r\n          {task.title}\r\n        </h3>\r\n        <IconButton onClick={() => deleteTask(task)}>\r\n          <DeleteForeverIcon />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\n\r\nimport TaskItem from './TaskItem';\r\nimport { setMessage } from '../../reducers/tasksSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ColumnType, ICreatedTaskType, ITaskState } from '../../types';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction TasksList({ column }: { column: ColumnType }) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { tasksArr, hasError, message } = useSelector(\r\n    (state: { tasks: ITaskState }) => state.tasks,\r\n  );\r\n\r\n  return (\r\n    <section className=\"task-list\">\r\n      <section className=\"task-list__items\">\r\n        {tasksArr\r\n          .filter(task => task.columnId === column._id)\r\n          .map((task: ICreatedTaskType) => (\r\n            <TaskItem key={task._id} task={task} column={column} />\r\n          ))}\r\n      </section>\r\n\r\n      <Snackbar\r\n        open={message ? true : false}\r\n        autoHideDuration={5000}\r\n        onClose={() => dispatch(setMessage(''))}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        key={'bottomright'}\r\n      >\r\n        <Alert\r\n          onClose={() => dispatch(setMessage(''))}\r\n          severity={hasError ? 'error' : 'success'}\r\n          sx={{ width: '100%', fontSize: '1rem' }}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TasksList;\r\n","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { TextField } from '@mui/material';\r\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\r\nimport ClearOutlinedIcon from '@mui/icons-material/ClearOutlined';\r\n\r\nimport {\r\n  setShowModalDeleteColumn,\r\n  setShowModalCreateTask } from '../../reducers/modalPopupSlice';\r\nimport { updateColumn, setCurrentColumn } from '../../reducers/columnsSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ColumnType } from '../../types';\r\nimport TasksList from '../Tasks/TasksList';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nimport './Column.scss';\r\n\r\ntype FormValues = {\r\n  title: string;\r\n};\r\n\r\nexport default function Column({ column }: { column: ColumnType }) {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const param = useParams();\r\n  const boardId = param.id;\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit = handleSubmit(data => {\r\n    updateColumnRequest(data);\r\n  });\r\n\r\n  const deleteColumn = (colId: string) => {\r\n    dispatch(setShowModalDeleteColumn(true));\r\n    dispatch(setCurrentColumn(colId));\r\n  };\r\n\r\n  const updateColumnRequest = (data: FormValues) => {\r\n    const url = `/boards/${boardId}/columns/${column._id}`;\r\n    dispatch(\r\n      updateColumn({\r\n        url: url,\r\n        title: data.title,\r\n        order: column.order,\r\n      }),\r\n    );\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"column\">\r\n      <div className=\"column__header\">\r\n        {editMode ? (\r\n          <div>\r\n            <form className=\"column__header--edit-mode\" onSubmit={onSubmit}>\r\n              <TextField\r\n                className=\"column__header__input\"\r\n                defaultValue={column.title}\r\n                {...register('title', {\r\n                  required: 'This field is required.',\r\n                  minLength: {\r\n                    value: 4,\r\n                    message: 'This field should be more than 4 symbols',\r\n                  },\r\n                })}\r\n                error={errors.title ? true : false}\r\n                size=\"small\"\r\n              />\r\n              {errors.title && (\r\n                <p className=\"column__error-message\">{errors.title.message}</p>\r\n              )}\r\n              <Button type=\"submit\" style={{ minWidth: '1rem' }} autoFocus>\r\n                <CheckOutlinedIcon />\r\n              </Button>\r\n              <Button\r\n                style={{ minWidth: '1rem' }}\r\n                onClick={() => {\r\n                  setEditMode(false);\r\n                  reset();\r\n                }}\r\n              >\r\n                <ClearOutlinedIcon />\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        ) : (\r\n          <div className=\"column__header--read-mode\">\r\n            <h3\r\n              className=\"column__title\"\r\n              onClick={() => {\r\n                setEditMode(true);\r\n              }}\r\n            >\r\n              {column.title}\r\n            </h3>\r\n            <IconButton onClick={() => deleteColumn(column._id)}>\r\n              <DeleteForeverIcon />\r\n            </IconButton>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <TasksList column={column}/>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => dispatch(setShowModalCreateTask(column._id))}\r\n      >\r\n        <FormattedMessage id='add_task' />\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { setShowModalCreateColumn } from '../../reducers/modalPopupSlice';\r\nimport { createColumn } from '../../reducers/columnsSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ModalPopupState, ColumnState } from '../../types';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype FormValues = {\r\n  title: string;\r\n};\r\n\r\nexport default function ModalCreateColumn({ url }: { url: string }) {\r\n  const dispatch = useAppDispatch();\r\n  const { columnsArr } = useSelector(\r\n    (state: { columns: ColumnState }) => state.columns,\r\n  );\r\n  const { showModalCreateColumn } = useSelector(\r\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\r\n  );\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit = handleSubmit(data => {\r\n    createColumnRequest(data);\r\n  });\r\n\r\n  const createColumnRequest = (data: FormValues) => {\r\n    dispatch(\r\n      createColumn({\r\n        url: url,\r\n        title: data.title,\r\n        order: columnsArr.length,\r\n      }),\r\n    );\r\n    dispatch(setShowModalCreateColumn(false));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={showModalCreateColumn}\r\n        onClose={() => dispatch(setShowModalCreateColumn(false))}\r\n      >\r\n        <DialogTitle>\r\n          <FormattedMessage id='create_column' />\r\n        </DialogTitle>\r\n        <form className=\"createColumn__form\" onSubmit={onSubmit}>\r\n          <DialogContent sx={{ width: '20rem' }}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              label=\"Column title\"\r\n              variant=\"outlined\"\r\n              {...register('title', {\r\n                required: 'This field is required.',\r\n                minLength: {\r\n                  value: 4,\r\n                  message: 'This field should be more than 4 symbols',\r\n                },\r\n              })}\r\n              helperText={errors.title && errors.title.message}\r\n              error={errors.title ? true : false}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button type=\"submit\">\r\n              <FormattedMessage id='submit' />\r\n              </Button>\r\n            <Button onClick={() => dispatch(setShowModalCreateColumn(false))}>\r\n              <FormattedMessage id='cancel' />\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { FormEvent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { setShowModalDeleteColumn } from '../../reducers/modalPopupSlice';\r\nimport { deleteColumn } from '../../reducers/columnsSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ModalPopupState } from '../../types';\r\n\r\nexport default function ModalDeleteColumn({ url }: { url: string }) {\r\n  const dispatch = useAppDispatch();\r\n  const { showModalDeleteColumn } = useSelector(\r\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\r\n  );\r\n\r\n  const deleteColumnRequest = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(deleteColumn(url));\r\n    dispatch(setShowModalDeleteColumn(false));\r\n  };\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={showModalDeleteColumn}\r\n        onClose={() => dispatch(setShowModalDeleteColumn(false))}\r\n      >\r\n        <DialogTitle>\r\n        <FormattedMessage id=\"want_to_delete_col\" />\r\n          </DialogTitle>\r\n        <DialogContent>\r\n          <Box\r\n            component=\"form\"\r\n            sx={{\r\n              '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n            }}\r\n            noValidate\r\n            autoComplete=\"off\"\r\n          ></Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(event: FormEvent) => deleteColumnRequest(event)}>\r\n            <FormattedMessage id='confirm' />\r\n          </Button>\r\n          <Button onClick={() => dispatch(setShowModalDeleteColumn(false))}>\r\n            <FormattedMessage id='cancel' />\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { setShowModalCreateTask } from '../../reducers/modalPopupSlice';\r\nimport { createTask } from '../../reducers/tasksSlice';\r\nimport { ITaskState, ModalPopupState } from '../../types';\r\nimport { useAppDispatch } from '../../hook';\r\n\r\n\r\ntype FormValues = {\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\nexport default function ModalCreateTask({ boardId, colId }: { boardId: string, colId: string }) {\r\n  const url = `/boards/${boardId}/columns/${colId}/tasks`;\r\n  const dispatch = useAppDispatch();\r\n  const { tasksArr } = useSelector(\r\n    (state: { tasks: ITaskState }) => state.tasks,\r\n  );\r\n  const { showModalCreateTask } = useSelector(\r\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\r\n  );\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit = handleSubmit(data => {\r\n    createTaskRequest(data);\r\n  });\r\n\r\n  const createTaskRequest = (data: FormValues) => {\r\n    dispatch(\r\n      createTask({\r\n        url: url,\r\n        title: data.title,\r\n        order: tasksArr.length,\r\n        description: data.description,\r\n        userId: 1,\r\n        users: []\r\n      }),\r\n    );\r\n\r\n    dispatch(setShowModalCreateTask(''));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={showModalCreateTask === '' ? false : true}\r\n        onClose={() => dispatch(setShowModalCreateTask(''))}\r\n      >\r\n        <DialogTitle>\r\n          <FormattedMessage id='create_task' />\r\n        </DialogTitle>\r\n        <form className=\"create-task__form\" onSubmit={onSubmit}>\r\n          <DialogContent sx={{ width: '20rem' }}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"task-title\"\r\n              label=\"Task title\"\r\n              variant=\"outlined\"\r\n              {...register('title', {\r\n                required: 'This field is required.',\r\n                minLength: {\r\n                  value: 4,\r\n                  message: 'This field should be more than 4 symbols',\r\n                },\r\n              })}\r\n              helperText={errors.title && errors.title.message}\r\n              error={errors.title ? true : false}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              id=\"task-description\"\r\n              label=\"Description\"\r\n              variant=\"outlined\"\r\n              {...register('description', {\r\n                required: 'This field is required.',\r\n                minLength: {\r\n                  value: 4,\r\n                  message: 'This field should be more than 4 symbols',\r\n                },\r\n              })}\r\n              helperText={errors.title && errors.title.message}\r\n              error={errors.title ? true : false}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button type=\"submit\">\r\n              <FormattedMessage id='submit' />\r\n            </Button>\r\n            <Button onClick={() => dispatch(setShowModalCreateTask(''))}>\r\n              <FormattedMessage id='cancel' />\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { setShowModalUpdateTask } from '../../reducers/modalPopupSlice';\r\nimport { updateTask } from '../../reducers/tasksSlice';\r\nimport { ICreatedTaskType } from '../../types';\r\nimport { useAppDispatch } from '../../hook';\r\nimport './modalTaskInfo.scss';\r\n\r\ntype FormValues = {\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\nexport default function ModalUpdateTask({ url, task }: { url: string, task: ICreatedTaskType | null}) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const taskCreation = task as ICreatedTaskType;\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit = handleSubmit(data => {\r\n    updateTaskRequest(data);\r\n  });\r\n\r\n  const updateTaskRequest = (data: FormValues) => {\r\n    dispatch(\r\n      updateTask({\r\n        url: url,\r\n        title: data.title,\r\n        order: taskCreation.order,\r\n        description: data.description,\r\n        columnId: taskCreation.columnId,\r\n        userId: 1,\r\n        users: [],\r\n        _id: taskCreation._id,\r\n        taskId: '',\r\n        boardId: '',\r\n      }),\r\n    );\r\n\r\n    dispatch(setShowModalUpdateTask(null));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={taskCreation === null ? false : true}\r\n        onClose={() => dispatch(setShowModalUpdateTask(null))}\r\n        className=\"modal-task\"\r\n      >\r\n        <form className=\"create-task__form\" onSubmit={onSubmit}>\r\n          <DialogContent sx={{ width: '20rem' }}>\r\n            <TextField\r\n              fullWidth\r\n              sx={{ display: 'block', mb: '1rem' }}\r\n              id=\"standard-basic\"\r\n              label=\"Task title\"\r\n              variant=\"outlined\"\r\n              defaultValue={taskCreation.title}\r\n              className=\"modal-task__title\"\r\n              {...register('title', {\r\n                required: 'This field is required.',\r\n                minLength: {\r\n                  value: 5,\r\n                  message: 'This field should be more than 5 symbols',\r\n                },\r\n              })}\r\n              helperText={errors.title && errors.title.message}\r\n              error={errors.title ? true : false}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              defaultValue={taskCreation.description}\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Description\"\r\n              multiline\r\n              className=\"modal-task__description\"\r\n              {...register('description')}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button type=\"submit\">\r\n              <FormattedMessage id=\"confirm\" />\r\n            </Button>\r\n            <Button onClick={() => dispatch(setShowModalUpdateTask(null))}>\r\n              <FormattedMessage id=\"cancel\" />\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { FormEvent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { setShowModalDeleteTask } from '../../reducers/modalPopupSlice';\r\nimport { deleteTask } from '../../reducers/tasksSlice';\r\nimport { useAppDispatch } from '../../hook';\r\nimport { ModalPopupState } from '../../types';\r\n\r\nexport default function ModalDeleteTask({ url }: { url: string }) {\r\n  const dispatch = useAppDispatch();\r\n  const { showModalDeleteTask } = useSelector(\r\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\r\n  );\r\n\r\n  const deleteTaskRequest = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(deleteTask(url));\r\n    dispatch(setShowModalDeleteTask(null));\r\n  };\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={showModalDeleteTask === null ? false : true}\r\n        onClose={() => dispatch(setShowModalDeleteTask(null))}\r\n      >\r\n        <DialogTitle>\r\n          <FormattedMessage id=\"want_to_delete_task\" />\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box\r\n            component=\"form\"\r\n            sx={{\r\n              '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n            }}\r\n            noValidate\r\n            autoComplete=\"off\"\r\n          ></Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={(event: FormEvent) => deleteTaskRequest(event)}>\r\n            <FormattedMessage id=\"confirm\" />\r\n          </Button>\r\n          <Button onClick={() => dispatch(setShowModalDeleteTask(null))}>\r\n            <FormattedMessage id=\"cancel\" />\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\n\r\nimport Column from '../../Column/Column';\r\nimport Spinner from '../../Spinner/Spinner';\r\nimport ModalCreateColumn from '../../ModalCreateColumn/ModalCreateColumn';\r\nimport ModalDeleteColumn from '../../ModalDeleteColumn/ModalDeleteColumn';\r\nimport { setShowModalCreateColumn } from '../../../reducers/modalPopupSlice';\r\nimport { getColumns, setMessage } from '../../../reducers/columnsSlice';\r\nimport { getTasks } from '../../../reducers/tasksSlice';\r\nimport { useAppDispatch } from '../../../hook';\r\nimport ModalCreateTask from '../../ModalCreateTask/ModalCreateTask';\r\nimport ModalUpdateTask from '../../ModalUpdateTask/ModalUpdateTask';\r\nimport ModalDeleteTask from '../../ModalDeleteTask/ModalDeleteTask';\r\nimport {\r\n  ColumnType,\r\n  ColumnState,\r\n  ModalPopupState,\r\n  BoardState,\r\n} from '../../../types';\r\nimport './Board.scss';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction Board() {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    showModalCreateColumn,\r\n    showModalDeleteColumn,\r\n    showModalCreateTask,\r\n    showModalDeleteTask,\r\n    taskCreation,\r\n  } = useSelector((state: { modalPopup: ModalPopupState }) => state.modalPopup);\r\n\r\n  const { columnsArr, currentColumnId, isLoading, hasError, message } =\r\n    useSelector((state: { columns: ColumnState }) => state.columns);\r\n\r\n  const { boardsArr } = useSelector(\r\n    (state: { boards: BoardState }) => state.boards,\r\n  );\r\n\r\n  const params = useParams();\r\n  const boardId = params.id as string;\r\n\r\n  const url = `/boards/${boardId}/columns`;\r\n  const boardTitle = boardsArr\r\n    .filter(board => board._id === boardId)\r\n    .map(board => board.title);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    dispatch(getColumns(url));\r\n    dispatch(getTasks(`/tasksSet/${boardId}`));\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"board\">\r\n      <div className=\"board__header\">\r\n        <h1 className=\"board__title\">\r\n          <FormattedMessage id=\"board_page\" /> {boardTitle}\r\n        </h1>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(setShowModalCreateColumn(true))}\r\n        >\r\n          <FormattedMessage id=\"add_column\" />\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          sx={{ marginLeft: '1rem' }}\r\n          onClick={() => navigate(`/board/`)}\r\n        >\r\n          <FormattedMessage id=\"back\" />\r\n        </Button>\r\n      </div>\r\n\r\n      <section className=\"board__columns\">\r\n        {isLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n          columnsArr.map((column: ColumnType) => {\r\n            return <Column key={column._id} column={column} />;\r\n          })\r\n        )}\r\n      </section>\r\n      {showModalCreateColumn && <ModalCreateColumn url={url} />}\r\n      {showModalDeleteColumn && (\r\n        <ModalDeleteColumn url={`${url}/${currentColumnId}`} />\r\n      )}\r\n      {showModalCreateTask && <ModalCreateTask boardId={boardId} colId={showModalCreateTask} />}\r\n\r\n      { taskCreation && (\r\n        <ModalUpdateTask\r\n          task={taskCreation}\r\n          url={`${url}/${taskCreation.columnId}/tasks/${taskCreation._id}`}\r\n        />\r\n      )}\r\n      {showModalDeleteTask && (\r\n        <ModalDeleteTask\r\n          url={`${url}/${showModalDeleteTask.columnId}/tasks/${showModalDeleteTask._id}`}\r\n        />\r\n      )}\r\n      <Snackbar\r\n        open={message ? true : false}\r\n        autoHideDuration={5000}\r\n        onClose={() => dispatch(setMessage(''))}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        key={'bottomright'}\r\n      >\r\n        <Alert\r\n          onClose={() => dispatch(setMessage(''))}\r\n          severity={hasError ? 'error' : 'success'}\r\n          sx={{ width: '100%', fontSize: '1rem' }}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"\n}), 'CheckOutlined');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"\n}), 'ClearOutlined');\nexports.default = _default;"],"names":["Task","task","dispatch","column","useAppDispatch","className","onClick","setShowModalUpdateTask","updateTaskRequest","title","IconButton","setShowModalDeleteTask","deleteTask","DeleteForever","Alert","React","props","ref","elevation","variant","useSelector","state","tasks","tasksArr","hasError","message","filter","columnId","_id","map","Snackbar","open","autoHideDuration","onClose","setMessage","anchorOrigin","vertical","horizontal","severity","sx","width","fontSize","Column","useState","editMode","setEditMode","boardId","useParams","id","useForm","register","errors","formState","handleSubmit","reset","onSubmit","data","updateColumnRequest","url","updateColumn","order","TextField","defaultValue","required","minLength","value","error","size","Button","type","style","minWidth","autoFocus","CheckOutlined","ClearOutlined","colId","setShowModalDeleteColumn","setCurrentColumn","setShowModalCreateTask","ModalCreateColumn","columnsArr","columns","showModalCreateColumn","modalPopup","createColumnRequest","createColumn","length","setShowModalCreateColumn","Dialog","DialogTitle","DialogContent","fullWidth","label","helperText","DialogActions","ModalDeleteColumn","showModalDeleteColumn","Box","component","m","noValidate","autoComplete","event","preventDefault","deleteColumn","deleteColumnRequest","ModalCreateTask","showModalCreateTask","createTaskRequest","createTask","description","userId","users","ModalUpdateTask","taskCreation","updateTask","taskId","display","mb","multiline","ModalDeleteTask","showModalDeleteTask","deleteTaskRequest","currentColumnId","isLoading","boardsArr","boards","boardTitle","board","navigate","useNavigate","useEffect","getColumns","getTasks","marginLeft","Spinner","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}